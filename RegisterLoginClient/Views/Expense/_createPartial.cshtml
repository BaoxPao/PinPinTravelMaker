<div class="container mt-5">
    <h2>創建費用表</h2>
    <form class="form border border-dark rounded p-3 mb-3" id="main" novalidate>
        <legend>付款人</legend>
        <div class="form-group col-md-6">
            <div class="input-group mb-3">
                <span class="input-group-text">名稱</span>
                <Input type="text" class="form-control" id="expensName" placeholder="輸入費用的名稱" required />
            </div>
        </div>
        <div class="form-group col-md-6">
            <div class="input-group mb-3">
                <span class="input-group-text">行程表</span>
                <select class="form-control" id="scheduleSelect" required>
                    <option value="" disabled selected>請選擇一個行程表</option>
                </select>
            </div>
        </div>
        <div class="form-group col-md-6">
            <div class="input-group mb-3">
                <span class="input-group-text">付款者</span>
                <select class="form-control" id="payerSelect" required>
                    <option value="" disabled selected>請選擇一個付款者</option>
                </select>
            </div>
        </div>
        <div class="form-group col-md-6">
            <div class="input-group mb-3">
                <span class="input-group-text">付款種類</span>
                <select class="form-control" id="categorySelect" required></select>
            </div>
        </div>
        <div class="form-group col-md-6">
            <div class="input-group mb-3">
                <span class="input-group-text">幣別</span>
                <select class="form-control" id="currencySelect" required></select>
            </div>
        </div>
        <div class="form-group col-md-6">
            <div class="input-group mb-3">
                <span class="input-group-text">金額</span>
                <input type="number" class="form-control" id="totalAmount" placeholder="輸入金額" required />
            </div>
        </div>
        <div class="form-group col-md-6">
            <div class="input-group">
                <span class="input-group-text">備註</span>
                <textarea class="form-control" id="remark" style="resize:vertical" aria-label="新增備註"></textarea>
            </div>
        </div>
    </form>
    <div class="form-check form-switch">
        <input class="form-check-input" type="checkbox" role="switch" id="switchAvg" checked>
        <label class="form-check-label" for="switchAvg">自動平均</label>
        <button type="button" class="btn btn-secondary" id="btnAvg">預設值</button>
    </div>
    <div id="participantBlock">
    </div>
    <button type="button" class="btn btn-secondary" id="btnSubmit">新增表單</button>
</div>

<script src="~/js/datapopulator.js" asp-append-version="true"></script>
<script>
    var user_id = $('#userId');
    var group_data;

    $(function () {
        init();
        $('#scheduleSelect').on("change", GetGroupUser)

        $('#payerSelect').on("change", payerSelectchange);

        $('#btnAvg').on("click", () => {
            const total = parseInt($('#totalAmount').val(), 10);
            const memberCount = $('.amount').length;
            const amounts = avgTotal(total, memberCount);
            const members = $('.amount');
            members.each(function (index, item) {
                $(item).val(amounts[index]);
            });
        })

        $('#totalAmount').on("input", totalAmount);

        $('#btnSubmit').on("click", async function (event) {
            event.preventDefault();

            var isValid = true;
            var mainform = $("#main");
            var participants = $(".participant");

            //判斷表單有無填入
            if (!mainform[0].checkValidity()) {
                isValid = false;
                mainform.addClass('was-validated');
            }

            // 判斷參與者表單是否填入
            participants.each(function () {
                var participantForm = $(this);
                if (!participantForm[0].checkValidity()) {
                    isValid = false;
                    participantForm.addClass('was-validated');
                }
            });

            var Total = parseInt($('#totalAmount').val(), 10);
            var checktotal = 0;
            var members = $('.amount');

            var avgAmount = Math.floor(Total / members.length);
            var remainder = Total % members.length;

            members.each(function (index, item) {
                checktotal += parseInt($(item).val(), 10);
            })

            console.log(checktotal)
            console.log(Total)

            if (checktotal != Total) {
                alert('金額與總金額不同');
                return;
            }

            if (!isValid) {
                return;
            }

            //整理POST資料
            var formData = {
                scheduleId: $('#main #scheduleSelect').val(),
                payerId: $('#main #payerSelect').val(),
                splitCategoryId: $('#main #categorySelect').val(),
                name: $('#main #expensName').val(),
                currencyId: $('#main #currencySelect').val(),
                amount: parseFloat($('#main #totalAmount').val()),
                remark: $('#main #remark').val(),
                participants: []
            }

            participants.each(function () {
                var participantForm = $(this);
                formData.participants.push({
                    userId: 0,
                    userName: participantForm.find('#name').val(),
                    amount: parseFloat(participantForm.find('#amount').val()),
                    isPaid: participantForm.find('#isPaid').is(':checked')
                });
            });

            try {
                var response = await axios.post(`${baseAddress}/api/SplitExpenses/CreateNewExpense`, formData);
                console.log('成功提交:', response.data);
                alert('成功提交');
                $("#btnGetExpense").click();
            } catch (error) {
                console.error('提交時發生錯誤:', error);
            }
        })

        $('#switchAvg').on("change",function (){
            if (this.checked) {
                $('#totalAmount').on("input", totalAmount).trigger('input')
            }
            else{
                $('#totalAmount').off("input", totalAmount)
            }
        })
    });

    async function init() {
        try {
            await GetCurrency_category();
            await GetSplit_category();
            await GetUserSchedules();
            await GetGroupUser();
        } catch (error) {
            console.error('Error during initialization:', error);
        }
    }

    async function GetUserSchedules() {
        try {
            console.log(token);
            var response = await axios.get(`${baseAddress}/api/schedules/GetRelatedSchedules`, {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            })

            var data = response.data;
            console.log(data);

            populateSelect('#scheduleSelect', response.data);
        } catch (error) {
            console.log(error);
            alert("獲取資料失敗");
        }
    }

    async function GetGroupUser() {
        try {
            var response = await axios.get(`${baseAddress}/api/ScheduleGroups`, {
                params: {
                    schedule_id: $('#scheduleSelect').val(),
                }
            })
            group_data = response.data

            populateSelect('#payerSelect', group_data);

            payerSelectchange()
        } catch (error) {
            console.log(error);
            alert("獲取資料失敗");
        }
    }

    function totalAmount() {
        const total = parseInt($(this).val(), 10);
        const memberCount = $('.amount').length;
        const amounts = avgTotal(total, memberCount);
        const members = $('.amount');
        members.each(function (index, item) {
            $(item).val(amounts[index]);
        });
    }

    function avgTotal(total, memberCount) {
        const avgAmount = Math.floor(total / memberCount);
        let remainder = total % memberCount;
        const amounts = Array(memberCount).fill(avgAmount);

        for (let i = 0; i < memberCount; i++) {
            if (remainder > 0) {
                amounts[i]++;
                remainder--;
            }
        }

        return amounts;
    }

    function payerSelectchange() {
        var copydata = { ...group_data };
        delete copydata[$('#payerSelect').val()];

        $('#participantBlock').empty();

        $.each(copydata, function (index, item) {
            CreateParticipant(item, index);
        });
    }

    function CreateParticipant(name, index) {

        var form = $('<form class="form border border-dark rounded p-3 mb-3 participant" id="participant" novalidate></form>')
        var legend = $(`<legend>團員${index}</legend>`)

        var formGroup = $('<div class="form-group col-md-6"></div>');

        var nameInputGroup = $('<div class="input-group mb-3"></div>');
        var nameLabel = $('<span class="input-group-text">團員</span>');
        var nameInput = $('<input type="text" class="form-control" required>').attr('id', 'name').val(name);

        nameInputGroup.append(nameLabel).append(nameInput);

        var amountInputGroup = $('<div class="input-group mb-3"></div>');
        var amountLabel = $('<span class="input-group-text">金額</span>');
        var amountInput = $('<input type="number" class="form-control amount" required>').attr('id', 'amount');

        amountInputGroup.append(amountLabel).append(amountInput);

        var checkboxInputGroup = $('<div class="input-group mb-3 d-flex align-items-center"></div>');
        var checkboxLabel = $('<span class="input-group-text">是否付款</span>');
        var checkbox = $('<input type="checkbox" class="form-check-input ms-2 required">').attr('id', 'isPaid');


        checkboxInputGroup.append(checkboxLabel).append(checkbox);

        formGroup.append(nameInputGroup)
            .append(amountInputGroup)
            .append(checkboxInputGroup);

        form.append(legend).append(formGroup);

        $('#participantBlock').append(form);

    }

    async function GetCurrency_category() {
        var response = await axios.get(`${baseAddress}/api/category/Getcurrency_category`)
        var data = response.data;

        populateSelect('#currencySelect', data);
    }

    async function GetSplit_category() {
        var response = await axios.get(`${baseAddress}/api/category/GetSplitCategories`)
        var data = response.data;

        populateSelect('#categorySelect', data);
    }
</script>
