@section Styles {
    <style>
        .card-img-top {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }

        .map-details {
            padding: 20px;
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            font-family: 'Roboto', sans-serif;
        }

        .map-details-title {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 10px;
            color: #1a73e8;
        }

        .map-details-address {
            font-size: 1rem;
            margin-bottom: 10px;
        }

        .map-details-rating {
            font-size: 1rem;
            margin-bottom: 10px;
        }

        .map-details-hours {
            font-size: 1rem;
            margin-bottom: 10px;
        }

        .map-details-reviews-title {
            font-size: 1.25rem;
            font-weight: bold;
            margin-bottom: 10px;
        }

        .map-details-reviews {
            list-style-type: none;
            padding-left: 0;
            margin: 0;
        }

        .map-details-review {
            background-color: #f1f3f4;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 10px;
        }

            .map-details-review strong {
                color: #1a73e8;
            }
    </style>
}
<meta charset="UTF-8">
<title>搜尋景點</title>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<div class="container">
    <h1>搜尋景點</h1>
    <div class="input-group mb-3">
        <input type="text" id="searchCity" class="form-control" placeholder="想去哪裡玩?">
        @* 搜尋關鍵字 *@
        <input type="text" id="searchKeyword" class="form-control" placeholder="吃、喝、玩、樂，立即搜尋!">
        <div class="input-group-append">
            <button class="btn btn-primary" type="button" onclick="search()">搜尋</button>
        </div>
    </div>
    <div id="results" class="row"></div>

    <!-- Button trigger modal -->
    <!-- 詳細資訊Modal -->
    <div class="modal fade" id="detailModal" tabindex="-1" aria-labelledby="detailModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="detailModalLabel">詳細資訊</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="detailContent">
                        <p>載入地點詳細資訊</p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">關閉</button>
                    <button type="button" class="btn btn-primary wishlists">加入願望清單</button>
                </div>
            </div>
        </div>
    </div>

    <!--願望清單Modal-->
    <div class="modal fade" id="wishlistModal" tabindex="-1" aria-labelledby="wishlistModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="wishlistModalLabel">願望清單</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="wishlistForm">
                        <!-- 你可以在这里添加输入字段或其他内容 -->
                        <div id="app">
                            <div class="mb-3">
                                <label>選擇清單:</label>
                                <select id="wishlist" v-model="selectedWishlist" v-on:change="changeOption">
                                    <option v-for="wishlist in wishlists" :key="wishlist.id" :value="wishlist.id">
                                        {{ wishlist.name }}
                                    </option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label>選擇分類:</label>
                                <select id="location" v-model="selectedLocationCategory">
                                    <option v-for="location in locationCategories" :key="location.id" :value="location.id">
                                        {{ location.name }}
                                    </option>
                                </select>
                            </div>
                        </div>
                        <!-- 其他内容 -->
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
                    <button type="submit" class="btn btn-primary wishlists">加入</button>
                </div>

            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="https://unpkg.com/vue@3.4.31/dist/vue.global.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.2/axios.min.js"
            integrity="sha512-JSCFHhKDilTRRXe9ak/FJ28dcpOJxzQaCd3Xg8MyF6XFjODhy/YMCM8HW0TFDckNHWUewW+kfvhin43hKtJxAw=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        var baseAddress = "https://localhost:7280";       //Developr Server //注意結尾沒有斜線!
        //var baseAddress = "https://localhost:xx";       //Staging Server(Testing Server)
        //var baseAddress = "https://localhost:yy";       //Production Server(上線營運Server)

        //搜尋地點、關鍵字
        async function search() {
            const searchCity = document.getElementById('searchCity').value;
            const searchKeyword = document.getElementById('searchKeyword').value;

            if (searchCity) {
                try {
                    let queries = [];

                    if (searchKeyword) {
                        const keywordQuery = `${searchCity} ${searchKeyword}`;
                        queries.push(axios.get(`${baseAddress}/api/SearchSpots/search`, { params: { query: keywordQuery } }));
                    } else {
                        const foodQuery = `${searchCity} 美食`;
                        const attractionsQuery = `${searchCity} 景點`;
                        const activitiesQuery = `${searchCity} 行程`;
                        queries.push(
                            axios.get(`${baseAddress}/api/SearchSpots/search`, { params: { query: foodQuery } }),
                            axios.get(`${baseAddress}/api/SearchSpots/search`, { params: { query: attractionsQuery } }),
                            axios.get(`${baseAddress}/api/SearchSpots/search`, { params: { query: activitiesQuery } })
                        );
                    }

                    const responses = await Promise.all(queries);

                    const resultsContainer = document.getElementById('results');
                    resultsContainer.innerHTML = '';

                    function processResults(results, limit) {
                        if (Array.isArray(results)) {
                            results.sort((a, b) => b.user_ratings_total - a.user_ratings_total);
                            return limit ? results.slice(0, limit) : results;
                        } else {
                            console.error('data.results 不是數組');
                            return [];
                        }
                    }


                    if (searchKeyword) {
                        const keywordData = responses[0].data;
                        const sortedKeywordResults = processResults(keywordData.results);
                        await displayResults(sortedKeywordResults, `搜尋結果 (${searchKeyword})`, searchCity);
                    } else {
                        const foodData = responses[0].data;
                        const attractionsData = responses[1].data;
                        const activitiesData = responses[2].data;

                        const topFoodResult = processResults(foodData.results, 3);
                        const topAttractionResults = processResults(attractionsData.results, 3);
                        const topActivitiesResults = processResults(activitiesData.results, 3);

                        await displayResults(topFoodResult, '美食', searchCity);
                        await displayResults(topAttractionResults, '景點', searchCity);
                        await displayResults(topActivitiesResults, '體驗', searchCity);
                    }
                } catch (error) {
                    console.error('Error:', error);
                }
            } else {
                console.error('請輸入城市名稱');
            }
        }

        //取得地點照片
        async function getPhotoUrl(photoReference) {
            try {
                const response = await axios.get(`${baseAddress}/api/SearchSpots/GetPhoto`, {
                    params: {
                        photoReference: photoReference
                    }
                });
                return response.data.url;
            } catch (error) {
                console.error('Error:', error);
                return '';
            }
        }

        //以card形式顯示搜尋結果
        async function displayResults(sortedResults, category, searchCity) {
            const resultsContainer = document.getElementById('results');
            if (sortedResults.length > 0) {
                resultsContainer.innerHTML += `<h2>${searchCity} ${category}</h2>`;
                for (const place of sortedResults) {
                    let photoUrl = '';
                    if (place.photos && place.photos.length > 0) {
                        const photoReference = place.photos[0].photo_reference;
                        photoUrl = await getPhotoUrl(photoReference);
                    }

                    const card = document.createElement('div');
                    card.className = 'col-md-4 mb-3';
                    card.innerHTML = `
                                              <div class="card">
                                                            ${photoUrl ? `<img src="${photoUrl}" class="card-img-top" width:150px alt="${place.name}">` : '<img src="https://via.placeholder.com/400x200" class="card-img-top" alt="No image available">'}
                                                            <div class="card-body">
                                                                <h5 class="card-title">${place.name}</h5>
                                                                <p class="card-text">${place.formatted_address}</p>
                                                                <p class="card-text">評價: ${place.rating} (${place.user_ratings_total} reviews)</p>
                                                                            <button type="button" class="btn btn-primary wishlists" target="_blank" data-bs-toggle="modal" data-bs-target="#wishlistModal">加入願望清單</button>
                                                            <button type="button" class="btn btn-primary btnDetail" data-bs-toggle="modal" data-bs-target="#detailModal" data-place-id="${place.place_id}">詳細資訊</button>
                                                       </div>
                                               </div>
                                                    `;
                    resultsContainer.appendChild(card);
                }
                const detailButtons = document.querySelectorAll('.btnDetail');
                detailButtons.forEach(button => {
                    button.addEventListener('click', (e) => {
                        const placeId = e.currentTarget.getAttribute('data-place-id');
                        loadDetails(placeId);
                    });
                });
            }
        }

        //在user點選地點的[詳細資料]後，以跳出視窗顯示評論、營業時間、價格
        async function loadDetails(placeId) {
            console.log(`placeId=${placeId}`);
            const detailContent = document.getElementById('detailContent');
            detailContent.innerHTML = '載入中...';

            try {
                const response = await axios.get(`${baseAddress}/api/SearchSpots/GetDetails`, {
                    params: { placeId }
                });

                console.log('api response', response);
                const details = response.data.result;

                if (details) {
                    detailContent.innerHTML = `
                                                            <div class="map-details">
                                                            <h5 class="map-details-title">${details.name}</h5>
                                                            <p class="map-details-address">${details.formatted_address}</p>
                                                            <p class="map-details-rating">評價: ${details.rating} (${details.user_ratings_total} reviews)</p>
                                                            <p class="map-details-hours"><strong>營業時間:</strong><br>
                                                            ${details.opening_hours ? details.opening_hours.weekday_text.join('<br>') : '未提供'}</p>
                                                            <h6 class="map-details-reviews-title">評論</h6>
                                                            <ul class="map-details-reviews">
                                                                ${details.reviews ? details.reviews.map(review => `
                                                                    <li class="map-details-review">
                                                                        <strong>${review.author_name}:</strong> ${review.text}
                                                                    </li>
                                                                `).join('') : '<li>無評論</li>'}
                                                            </ul>
                                                        </div>
                                                    `;
                } else {
                    detailContent.innerHTML = '無法找到此地點的詳細資料。';
                }

            } catch (error) {
                console.error('Error fetching details', error);
                detailContent.innerHTML = '無法加載詳細資料，請稍後再試';
            }
        }

        //當user點選[加入願望清單]時，以modal視窗供user選擇要加入的清單。系統載入user所有願望清單，選定願望清單後，系統載入清單項下的所有分類
        const vueWishlist = {
            data() {
                return {
                    selectedWishlist: null,
                    selectedLocationCategory: null,
                    wishlists: [],
                    locationCategories: [],
                    allLocationCategories: []
                };
            },
            methods: {
                changeOption() {
                    this.filterLocationCategories();
                },
                filterLocationCategories() {
                    if (this.selectedWishlist !== null) {
                        // 根據選擇的願望清單過濾分類
                        this.locationCategories = this.allLocationCategories.filter(category => {
                            return category.wishlistId === this.selectedWishlist;
                        });
                    } else {
                        // 沒有選擇清單時，保持分類為空
                        this.locationCategories = [];
                    }
                }
            },
            mounted() {
                const userId = getUserIdFromToken();
                console.log('User ID:', userId);

                const uri = `${baseAddress}/api/Wishlist/GetAllWishlist/${userId}`;
                axios.get(uri).then(response => {
                    console.log('Response data:', response.data);

                    this.wishlists = response.data.map(wishlist => ({
                        id: wishlist.id,
                        name: wishlist.name
                    }));

                    this.allLocationCategories = response.data.flatMap(wishlist => wishlist.locationCategories);

                    this.locationCategories = [];
                }).catch(error => {
                    console.error('Error loading data:', error);
                    alert(error);
                });
            }
        };
        Vue.createApp(vueWishlist).mount("#app");

        /*取得當前用戶ID start*/
        //處理Base64
        function base64UrlDecode(base64Url) {
            // 替換 Base64Url 特有字符
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            // 解碼 Base64 字符串
            return decodeURIComponent(atob(base64).split('').map(function (c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));
        }
        //decode JWT
        function parseJwt(token) {
            // 分割 JWT 字符串
            const parts = token.split('.');
            if (parts.length !== 3) {
                throw new Error('Invalid token');
            }

            // 解碼 payload 部分
            const payload = parts[1];
            return JSON.parse(base64UrlDecode(payload));
        }
        function getUserIdFromToken() {
            const token = localStorage.getItem('token');
            if (token) {
                try {
                    const decodedToken = parseJwt(token);
                    return decodedToken['http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier']; // 根據實際的 claim 名稱來提取 userId
                } catch (error) {
                    console.error('Failed to decode token:', error);
                }
            }
            return null;
        }
        /*取得當前用戶ID end*/

        //在user點選地點的[加入願望清單]後，加到DB願望清單中
    </script>
}
